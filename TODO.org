* Core functionality [33%]
1. [X] =contrasync-accept=
2. [ ] display command line at top
   * the filter function is interfering with it (commenting it out from the make-process call makes the command line appear)
3. [ ] write edebug spec for =contrasync-with-process-buffer=

* Certain [33%]
1. [X] Multi-machine configuration - user specifies a machine name, which the destination path may use; or, the user can modify configuration based on the machine name
   * added =contrasync-machine-name=
2. [X] Better configuration format (see section below)
3. [ ] Check that the output path exists, and create it (with parents) if it does not.
4. [ ] Save state of directory-alist traversal across sessions.
5. [ ] Don't start new processes for paths which already have running processes
6. [ ] Pause/resume rsync jobs (SIGHUP/SIGCONT) - at per-process level and for all jobs (~contrasync-pause-all~/~contrasync-resume-all~)

** Change configuration format
1. Rename "destination" to "prefix", to clarify its use; I want the user to only have to specify it once per backup device.

   How about something like...
   #+BEGIN_SRC emacs-lisp
     '((:prefix "/media/user/my-disk/"
        :sources ("~/.emacs.d/"
                  "~/Documents/")))
   #+END_SRC
2. Instead of requiring changes to =contrasync-command-line= to change the path, make a =format=-like way to specify the final destination path.

   Like ="%p/%m/%s"= for "<prefix path>/<machine name>/<source path>".

   Or maybe use a list - ='(prefix machine source)=

   Use that to do it on a per-path basis -
   #+BEGIN_SRC emacs-lisp
     '((:prefix "/media/user/my-disk/"
        :sources
        ("~/.emacs.d/"
         ;; if a string, use a default destination pattern - probably
         ;; (prefix machine source), user-customizable
         "~/Documents/"
         ;; the destination for this one will be "/media/user/my-disk/foo/"
         ("~/foo/" :destination (prefix source)))))
   #+END_SRC
   We define a ~contrasync-default-destination~, which is a pattern specified as a list. The default value is ~'(prefix machine source)~

   =:sources= can be strings or lists. If they are strings, ~contrasync-default-destination~ will be used to construct the destination. In the above example, "~/.emacs.d/" and "~/Documents" will be synced to "/media/user/my-disk/my-machine/home/user/.emacs.d/" and "/media/user/my-disk/my-machine/home/user/Documents/", respectively.

   If an element of =:sources= is a list, we look for a =:destination= and/or an =:arguments=.

   =:destination= overrides ~contrasync-default-destination~. It can be a string, or a function of two arguments - PREFIX and SOURCE.

   Like
   1. Greater flexibility without needing to change =contrasync-command-line-function=
   2. Structures your config, somewhat like =use-package= - :sources are glued to :prefix (but see #2 below)
   3. Can extend with =:arguments LIST= to override =contrasync-arguments=

   Dislike
   1. Will complicate destructuring.
   2. Can't use a source with a different :prefix (but see #2 above)

   We could also do something similar while keeping the alist -
   #+BEGIN_SRC emacs-lisp
     (let* ((disk              "/media/user/my-disk/")
            (disk-machine-name (concat disk "HP ProBook")))
       `(("~/.emacs.d/"           . ,disk-machine-name)
         ("~/Documents/"          . ,disk-machine-name)
         ("~/put-this-elsewhere/" . ,disk)))
   #+END_SRC
   Like
   1. Provides more control to the user, while keeping the implementation complexity down.

   Dislike
   1. User has to deal with quasiquoting/make =list= calls.
   2. Quasiquoting is visually ugly.
   3. We're still implicitly appending the SOURCE path - so they can't say
      : rsync ... ~/foo/bar/ /my-disk/
      or even
      : rsync ... ~/foo/bar/ /my-disk/foo/bar/
      but only
      : rsync ... ~/foo/bar/ /my-disk/home/user/foo/bar/
      * Could remove the implicit appending, but now the common case of "prefix-path/source-path" will either require more repetition than I'd like (using absolute paths for the destination; the prefix will be repeated in each one!), or more setup than I'd like (let-binding the disk path once, let-binding the source path for each source, and =(concat disk source)= for each destination)
   4. Repetition. Note how we're using =disk= in each path, directly or indirectly. With the plist idea, it is used implicitly. And the most common kind of path (=disk-machine-name=) becomes the (user-customizable) default pattern.

3. Tried going ahead with the plist described above, but it didn't look good to me at all. Working on a new one -

   #+BEGIN_SRC emacs-lisp
     (setq contrasync-disk-path "/media/user/my-disk/"
           contrasync-source-paths
           `("~/.emacs.d/"
             "~/1-music-notation/"
             "~/Documents/"
             "~/.config/"
             "~/.local/"
             ("~/phone/Nokia 6.1/"
              ,contrasync-disk-path "phone/Nokia 6.1/")))
   #+END_SRC

   Each source path can either be a string, a pair, or a list of strings.
   1. If it is a string, the destination path is =(concat contrasync-disk-path contrasync-machine-name source)=, e.g. for ="~/.emacs.d/"= it will be ="/media/user/my-disk/machine-name/home/user/.emacs.d/"=. This is meant for syncing to a local destination.
   2. If it is a pair, the =cdr= should be a remote protocol prefix - a string which specifies what remote protocol to use e.g. ="ssh:user@host:"=. The destination will be =(concat remote-prefix contrasync-disk-path contrasync-machine-name source)=. This is meant for syncing to a remote destination.
   3. If it is a list of strings, the first element should be the source path, and all the other elements are passed to =concat= to get the destination path. This is meant for syncing to both local or remote destinations.
   In all three cases, the source path can be local (e.g. ="/path/"=), or it can start with a remote protocol prefix (e.g. ="ssh:user@host:/path/"=). contrasync.el will just pass it to rsync after expansion.

   To run arbitrary Lisp code to generate paths, the user can quasiquote. There's no way to refer to the source path, though - they need to use ~let~ bindings to do that.

* Maybe
1. Better default value for =contrasync-max-procs=? Some way to determine the ideal value, maybe using number of CPU cores and/or network bandwidth?
2. Replace ~--delete-after~ with ~--delete~ when accepting changes? The user has (hopefully) already seen the deletions, and the latter is, I seem to remember, faster and less RAM intensive.
3. Throttle rsync CPU/RAM/disk use?
4. Auto resume with idle timer?
5. Nicer progress bar
