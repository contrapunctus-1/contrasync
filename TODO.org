* Certain
1. [ ] Multi-machine use - user specifies a machine name; the destination path finally becomes =<destination path>/<machine name>/<source path>/=
2. Progress bar
3. Rename "destination" to "prefix", to clarify its use; I want the user to only have to specify it once per backup device.

   How about something like...
   #+BEGIN_SRC emacs-lisp
     '((:prefix "/media/anon/my-disk/"
        :sources ("~/.emacs.d/"
                  "~/Documents/")))
   #+END_SRC
4. Instead of requiring changes to =rsync-command-line= to change the path, make a =format=-like way to specify the final destination path.

   Like ="%p/%m/%s"= for "<prefix path>/<machine name>/<source path>".

   Or maybe use a list - ='(prefix machine source)=

   Use that to do it on a per-path basis -
   #+BEGIN_SRC emacs-lisp
     '((:prefix "/media/anon/my-disk/"
        :sources
        ("~/.emacs.d/"
         ;; if a string, use a default destination pattern - probably
         ;; (prefix machine source), user-customizable
         "~/Documents/"
         ;; the destination for this one will be "/media/anon/my-disk/foo/"
         ("~/foo/" :destination (prefix source)))))
   #+END_SRC
   Like
   1. Greater flexibility without needing to change =rsync-command-line-function=
   2. Structures your config, somewhat like =use-package= - :sources are glued to :prefix (but see #2 below)

   Dislike
   1. Will complicate destructuring.
   2. Can't use a source with a different :prefix (but see #2 above)

   We could also do something similar while keeping the alist -
   #+BEGIN_SRC emacs-lisp
     (let* ((disk              "/media/anon/my-disk/")
            (disk-machine-name (concat disk "HP ProBook")))
       `(("~/.emacs.d/"           . ,disk-machine-name)
         ("~/Documents/"          . ,disk-machine-name)
         ("~/put-this-elsewhere/" . ,disk)))
   #+END_SRC
   Like
   1. Provides more control to the user, while keeping the implementation complexity down.

   Dislike
   1. User has to deal with quasiquoting/make =list= calls.
   2. Quasiquoting is visually ugly.
   3. We're still implicitly appending the SOURCE path - so they can't say
      : rsync ... ~/foo/bar/ /my-disk/
      only
      : rsync ... ~/foo/bar/ /my-disk/foo/bar/
      - Does anyone really want to say the former, though? I sure don't.
   4. Repetition. Note how we're using =disk= in each path, directly or indirectly. With the plist idea, it is used implicitly. And the most common kind of path (=disk-machine-name=) becomes the (user-customizable) default pattern.
5. Check that the output path exists, and create it (with parents) if it does not.
6. Pause/resume rsync jobs (SIGHUP/SIGCONT) - at per-process level and for all jobs (~rsync-pause-all~/~rsync-resume-all~)

* Maybe
1. Better default value for =rsync-max-procs=? Some way to determine the ideal value, maybe using number of CPU cores and/or network bandwidth?
2. Replace ~--delete-after~ with ~--delete~ when accepting changes? The user has (hopefully) already seen the deletions, and the latter is, I seem to remember, faster and less RAM intensive.
3. Throttle rsync CPU/RAM/disk use?
